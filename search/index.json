[{"content":"Java 杂谈 int 和Integer的联系和区别： int 是基础类型， Integer是封装类型；Integer是一个封装类，其对象可以调用类中的方法。 两个Integer对象比较时用“==”可能会发生问题 1 2 3 4 5 6 7 8 Integer a1 = 1231; Integer a2 = 1231; Integer a3 = 120; Integer a4 = 120; System.out.println(a1 == a2); //false System.out.println(a3 == a4); //true (-128 ~ 127)一个字节的缓存内用“==”也对 System.out.println(a1.equals(a2)); //true 所以对象之间的比较用equals方法比较好。对于Integer和int之间的比较均可\n1 2 3 4 5 6 int b1 = 1231; int b3 = 120; System.out.println(b1 == a1); //true System.out.println(b3 == a3); //true System.out.println(a1.equals(b1)); //true System.out.println(a1.equals(b3)); //false 字符串String类 String类是final类型；不可更改数值 1 public final class String implements Serializable, Comparable\u0026lt;String\u0026gt;, CharSequence{} split(String str)方法\n1 2 3 4 5 6 String str = \u0026#34;aa bb ccc d\u0026#34;; String[] pic = str.split(\u0026#34; \u0026#34;); for (int i = 0; i \u0026lt; pic.length; i++) { System.out.print(pic[i] + \u0026#34; \u0026#34;); } //输出：aa bb ccc d contains(String str)方法\n判断字符串是否包含str\nJava ArrayList 对象创建： 1 ArrayList\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); 方法： add(value) 从列表末尾添加一个元素\nadd（index，value）在指定位置插入元素，后面元素后移\nset(index, value) 在下表为index处，修改元素值\ntoString() 转换为字符串形式\nindexOf(value) 返回值为value的元素下表，没找到返回-1\nclear() 清空列表中的元素\nisEmpty() 判断列表是否为空\nget(index) 得到下标为index位置的元素\nfoeach()\n1 2 3 4 5 6 7 8 9 10 11 12 13 ArrayList\u0026lt;Integer\u0026gt; num1 = new ArrayList\u0026lt;\u0026gt;(); num1.add(1);//0 num1.add(2);//1 num1.add(3);//2 num1.add(4);//3 num1.add(5);//4 num1.forEach(num -\u0026gt; { num1.set(num1.indexOf(num), num * 10); } ); System.out.println(num1.toString()); 输出：[10, 20, 30, 40, 50] clone() 克隆列表 1 2 ArrayList\u0026lt;Integer\u0026gt; num2 = new ArrayList\u0026lt;\u0026gt;(); num2 = (ArrayList\u0026lt;Integer\u0026gt;) num1.clone(); 10.contains(value) 查看是否包括元素\n1 2 3 4 public boolean contains(Object o) { return indexOf(o) \u0026gt;= 0; } //此处调用了indexOf()方法。 Scanner 类中的方法 方法列举 nextInt():读取一个整数\nnextLine（）：读取一行字符\nnextLong（）：读取一个长整型数\nnext() 和 nextLine()的区别？ ​\tnextLine（）读取一整行字符\n​\tnext（）把一行字符按空格分开，读取一个字符\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 Scanner in = new Scanner(System.in); while (true) { String str = in.next(); if(str.equals(\u0026#34;end\u0026#34;)) { System.out.println(\u0026#34;in the end\u0026#34;); break; } System.out.println(str); } // 输入 hello world ! end // 输出 hello world ! in the end ArrayList\u0026lt;String\u0026gt; strings = new ArrayList\u0026lt;\u0026gt;(); while (true) { String str = in.nextLine(); if(str.equals(\u0026#34;end\u0026#34;)) { System.out.println(\u0026#34;in the end\u0026#34;); break; } strings.add(str); } System.out.println(strings.toString()); //输入 hello world //输入 ni hao //输入 end //输出 in the end [hello world, ni hao] hasNext() 和 hasNextLine() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ArrayList\u0026lt;String\u0026gt; strings = new ArrayList\u0026lt;\u0026gt;(); while (!in.hasNext(\u0026#34;exit\u0026#34;)) { String str = in.next(); strings.add(str); }\tSystem.out.println(strings.toString()); // 输入1\t| 2 he he she exit\tshe\texit // 输出1\t| [he, she]\t[he, she] 说明：\nhasNext（）和 hasNextLine( ) ：有字符返回true，否则返回false。 两者的区别在于是否用用空格分隔单行。 hasNextInt() 和 hasNextLong()同理，只不过是输入对象不同。 Path类 此处用的是文件的路径而不是名字\n1 2 3 4 5 6 7 8 9 String filename = \u0026#34;C:\\\\Users\\\\21060\\\\Desktop\\\\file.txt\u0026#34;; Path path = Paths.get(filename); Scanner scanner = new Scanner(path); while(scanner.hasNextLine()){ //process each line String line = scanner.nextLine(); System.out.println(line); } scanner.close(); ","date":"2023-10-19T11:23:46+08:00","image":"https://example.com/p/first/people_hu3909142d87821682d03adc28d1059ae8_5445906_120x120_fill_q75_box_smart1.jpeg","permalink":"https://example.com/p/first/","title":"First"}]